<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.system.mapper.CollegeMapper" >

  <resultMap id="BaseResultMap" type="com.system.pojo.College" >
    <id column="collegeID" property="collegeid" jdbcType="INTEGER" />
    <result column="collegeName" property="collegename" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where>
        <!-- 传入集合类型是oredCriteria 循环变量是criteria 关系是或者-->
      <foreach collection="oredCriteria" item="criteria" separator="or" >
          <!-- 如果传入的条件有效 单词的意思标准（相当于条件）.有效 -->
        <if test="criteria.valid" >
            <!-- <修剪前缀= "("后缀= ")"前缀覆盖 = "和" > -->
          <trim prefix="(" suffix=")" prefixOverrides="and" >
              <!-- 集合类型是oredCriteria 循环变量是criteria -->
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                  <!-- 通过判断标准来执行对应的查询条件 -->
                  <!-- 当条件不符合标准的时候 -->
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                  <!-- 条件是一个值的时候 调用此条件 相当与id查询 name查询-->
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                  <!-- 条件是两个值的时候 调用此条件 -->
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                  <!-- 如果条件是一个集合的话调用此条件 -->
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

    <!-- 批量更新 -->
  <sql id="Update_By_Example_Where_Clause" >
    <where >
        <!-- 传入集合类型是example.oredCriteria 循环变量是criteria -->
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
                <!-- 结构是条件判断如果满足就追加 -->
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List" >
    collegeID, collegeName
  </sql>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.system.pojo.CollegeExample" >
    select
      <!-- 条件满足 这个字段在exa实体类中 是一个布尔值 -->
    <if test="distinct" >
      distinct
    </if>
      <!-- 正常查询 -->
    <include refid="Base_Column_List" />
    from college
      <!-- 如果参数列表不为空 调用下面的方法 这个方法返回的是参数列表 也可以是条件查询-->
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
      <!-- 如果有分组字段 根据该字段进行分组查询 -->
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from college
    where collegeID = #{collegeid,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from college
    where collegeID = #{collegeid,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByExample" parameterType="com.system.pojo.CollegeExample" >
    delete from college
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <insert id="insert" parameterType="com.system.pojo.College" >
    insert into college (collegeID, collegeName)
    values (#{collegeid,jdbcType=INTEGER}, #{collegename,jdbcType=VARCHAR})
  </insert>

  <insert id="insertSelective" parameterType="com.system.pojo.College" >
    insert into college
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="collegeid != null" >
        collegeID,
      </if>
      <if test="collegename != null" >
        collegeName,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="collegeid != null" >
        #{collegeid,jdbcType=INTEGER},
      </if>
      <if test="collegename != null" >
        #{collegename,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.system.pojo.CollegeExample" resultType="java.lang.Integer" >
    select count(*) from college
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <update id="updateByExampleSelective" parameterType="map" >
    update college
    <set >
      <if test="record.collegeid != null" >
        collegeID = #{record.collegeid,jdbcType=INTEGER},
      </if>
      <if test="record.collegename != null" >
        collegeName = #{record.collegename,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByExample" parameterType="map" >
    update college
    set collegeID = #{record.collegeid,jdbcType=INTEGER},
      collegeName = #{record.collegename,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.system.pojo.College" >
    update college
    <set >
      <if test="collegename != null" >
        collegeName = #{collegename,jdbcType=VARCHAR},
      </if>
    </set>
    where collegeID = #{collegeid,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.system.pojo.College" >
    update college
    set collegeName = #{collegename,jdbcType=VARCHAR}
    where collegeID = #{collegeid,jdbcType=INTEGER}
  </update>
</mapper>